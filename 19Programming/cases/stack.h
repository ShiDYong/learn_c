/********************************************************************************
* @author: mason shi
* @date: 2023/9/13 22:26
* @version: 1.0
* @description: 第十九章程序设计
 *              模块：设计C程序(或其他任何语言的程序)时，最好将它看作一些独立的模块。模块是一组服务的集合，其中一些服务可以被程序
 *                    的其他部分(称为客户)使用。每个模块都有一个接口来描述所提供的服务。模块的细节(包括这些服务自身的源代码)都包含
 *                    在模块的实现中。在C语言环境下，这些“服务”就是函数。模块的接口就是头文件，头文件中包含哪些可以被程序中其他文件
 *                    调用的函数原型。模块的实现就是该模块中函数定义的源文件。
 *                    C库本身就是一些模块的集合。库中每个头都是一个模块的接口。例如,<stdio.h>是包含输入/输出函数的模块的接口,<string.h>
 *                    是包含字符串处理函数的模块的接口。
 *                    将程序分割成模块有一系列好处。
 *                    1.抽象。如果模块设计合理，则可以将其作为抽象对待。我们知道模块会做什么，但不需要知道这些功能的实现细节。因为抽象的存在，所以不必为了
 *                      修改部分程序而了解整个程序是如何工作的。同时，抽象让一个团队的多个程序员共同开发一个程序更容易。一旦对模块的接口达成一直，实现每一
 *                      个模块的责任可以被分派到各个成员身上。团队成员可以更大程度上相互独立地工作。
*                     2.可复用性。任何一个提供服务的模块都有可能在其他程序中复用。例如，我们的栈模块是可复用的。由于通常很难预测模块的未来使用情况，最好将模块
 *                      设计成可复用的。
 *                    3.可维护性。将程序模块化后，程序中的错误通常只会影响一个模块实现，因而更容易找到并修正错误。在修正来错误后，重建程序只需要重新编译该模块实现
 *                      （然后重新链接整个程序）即可。更广泛地说，为了提高性能或将程序移植到另一个平台上，我们甚至可以替换整个模块的实现。
 *                      上面这些好处都很重要，但其中可维护性是最重要的。按照模块来设计会使维护更容易。维护一个程序就像维护一辆汽车一样，修理轮胎应该不需要同时检修发动机。
********************************************************************************/
#ifndef STACK_H
#define STACK_H

#include<stdbool.h>

void make_empty(void);

bool is_empty(void);

bool is_full(void);

void push(int i);

void push(int value);

int pop(void);
int peek(void);

#endif
/**
 * 内聚性与耦合性：
 *     好的模块接口并不是声明的随意集合。在设计良好的程序中，模块应该应该具有下面两个性质。
 *     1.高内聚性。模块中的元素应该彼此紧密相关。可以认为它们是为了同一个目标而相互合作的。高内聚性会使模块更易于使用，同时程序更容易理解。
 *     2.低耦合性。模块之间应该尽可能相互独立。低耦合性可以使程序更便于修改，并方便以后复用模块。
*  模块的类型：
 *     由于需要高内聚性、低耦合性，模块通常分为下面几类。
 *     1.数据池。数据池是一些相关的变量或常量的集合。在C语言中，这类模块通常只是一个头文件。从程序设计的角度，通常不建议将变量放在头文件中，但建议把相关
 *       常量放在头文件中。在C库中，<float.h>和<limits.h>头都属于数据池。
 *     2.库。库是一个相关函数的集合。例如<string.h>头就是字符串处理函数库的接口。
 *     3.抽象对象。抽象对象是指针对隐藏的数据结构进行操作的函数集合。(本章的对象在C语言中，对象仅仅是可以存储值的一块内存。而在本章中，对象是一组数据以及针对
 *      这些数据的操作的集合。如果数据是隐藏起来的，那么整个对象是抽象的)。我们讨论的栈模块属于这一类。
 *     4.抽象数据类型(ADT).将具体数据实现方式隐藏起来的数据类型叫做抽象数据类型。客户模块可以使用该类型来声明变量，但是不会知道这些变量的具体数据结构。如果客户
 *       模块需要对这种变量进行操作，则必须调用抽象数据类型模块所提供的函数。抽象数据类型在现代程序设计中起着非常重要的租用。
 *
*   信息隐藏：
 *        设计良好的模块经常会对它的客户隐藏一些信息。例如，我们的栈模块的客户就需要知道栈是用数组、链表还是其他形式存储的。这种故意对客户隐藏信息的方法叫做信息隐藏。
 *        信息隐藏的两大优点：
 *        1.安全性。如果客户不知道栈是如何存储的，就不可能通过栈的内部机制擅自修改栈的数据。它们必须通过模块自身提供的函数来操作栈，而这些函数都是我们编写并测试过的。
 *        2.灵活性。无论对模块内部机制进行多大的改动，都不会很复杂。例如，我们可以首先将栈用数组实现，以后再该用链表或其他方式实现。我们当然需要重写这个模块的实现。但
 *        只要模块按照正确的方式设计，就不需要改变模块的接口。
 *  C语言中的强制信息隐藏：
 *        在C语言中，强制信息隐藏的主要工具是static存储类型。将具有文件作用域的变量声明为static可以使具有内部链接，从而避免它被其他文件(包括模块的客户)访问。
 *        (将函数声明为static也是有用的——函数只能被同一文件中的其他函数直接调用。)
 *        处于风格的考虑，一些程序员使用宏来指明哪些函数和变量是“共有的”(可以在程序的任何地方访问)，哪些是私有的(只能在一个文件内访问)；
 *        #define PUBLIC
 *        #define PRIVATE static
 *        将static写成PRIVATE是因为static在C语言中有很多写法，使用PRIVATE可以更清晰地指明这里它是被用来强制信息隐藏的。
 * */






